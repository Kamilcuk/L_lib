#!/usr/bin/env bash

if [[ "$1" == gen ]]; then
  get_args() {
    head -n 3 | tail -n1 |
      while read line; do
        case "$line" in
        *'<COMMAND>'*) echo '-- COMMAND' ;;
        *'[COMMAND]...'*) echo '-- COMMAND nargs="*"' ;;
        *'[COMMAND]'*) echo '-- COMMAND nargs="?"' ;;
        *'COMMAND...'*) echo '-- COMMAND nargs="+"' ;;
      esac
    done
  }
  get_options() {
    perl -pe 's/^\s*((-\S), )?(--\S+) <(\S+)>\s+(.*)/-- \2 \3 \4 flag=1 help="\5"/; s/^\s*((-\S), )?(--\S+)\s+(.*)/-- \2 \3 help="\4"/' |
    grep '^--' |
    sed 's/`/\\`/g'
  }
  do_indent() {
    sed 's/^/  /';
  }

  uv -h |
    grep '^  [a-z]' |
    awk '{print $1}' |
    while read l; do
      echo "{"
      echo "  name=$l help=\"$(uv $l -h | head -n1)\"";
      uv $l -h | get_options | do_indent
      uv $l -h | get_args | do_indent
      echo '}';
      echo;
    done | do_indent
  exit
fi


args=(
  description="An extremely fast Python package manager." \
  epilog='Use `uv help` for more details.' \
  -- -n --no-cache help='Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation' \
  -- --cache-dir help='Path to the cache directory' \
  -- --managed-python help='Require use of uv-managed Python versions' \
  -- --no-managed-python help='Disable use of uv-managed Python versions' \
  -- --no-python-downloads help='Disable automatic downloads of Python.' \
  -- -q --quiet help='Use quiet output' eval='verbose=$((verbose-1))' \
  -- -v --verbose action=count help="Use verbose output" \
  -- --color help='Control the use of color in output' choices="auto always never" \
  -- --native-tls action=store_1 help="Whether to load TLS certificates from the platform's native certificate store [env: UV_NATIVE_TLS=]" \
  -- --offline action=store_1 help="Disable network access [env: UV_OFFLINE=]" \
  -- --allow-insecure-host action=store_1 help='Allow insecure connections to a host [env: UV_INSECURE_HOST=]' \
  -- --no-progress action=store_1 help='Hide all progress outputs [env: UV_NO_PROGRESS=]' \
  -- --directory help='Change to the given directory prior to running the command' \
  -- --project help='Run the command within the given project directory [env: UV_PROJECT=]' \
  -- --config-file help='The path to a `uv.toml` file to use for configuration [env: UV_CONFIG_FILE=]' \
  -- --no-config action=store_1 help='Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) [env: UV_NO_CONFIG=]' \
  -- -V --version help='Display the uv version' action=store_1 \
  -- call=subparser \

  {
    name=run help="Run a command or script"
    --  --extra EXTRA flag=1 help="Include optional dependencies from the specified extra name"
    --  --all-extras help="Include all optional dependencies"
    --  --no-extra NO_EXTRA flag=1 help="Exclude the specified optional dependencies, if \`--all-extras\` is supplied"
    --  --no-dev help="Disable the development dependency group"
    --  --group GROUP flag=1 help="Include dependencies from the specified dependency group"
    --  --no-group NO_GROUP flag=1 help="Disable the specified dependency group"
    --  --no-default-groups help="Ignore the default dependency groups"
    --  --only-group ONLY_GROUP flag=1 help="Only include dependencies from the specified dependency group"
    --  --all-groups help="Include dependencies from all dependency groups"
    -- -m --module help="Run a Python module"
    --  --only-dev help="Only include the development dependency group"
    --  --no-editable help="Install any editable dependencies, including the project and any workspace members, as non-editable [env: UV_NO_EDITABLE=]"
    --  --exact help="Perform an exact sync, removing extraneous packages"
    --  --env-file ENV_FILE flag=1 help="Load environment variables from a \`.env\` file [env: UV_ENV_FILE=]"
    --  --no-env-file help="Avoid reading environment variables from a \`.env\` file [env: UV_NO_ENV_FILE=]"
    --  --with WITH flag=1 help="Run with the given packages installed"
    --  --with-editable WITH_EDITABLE flag=1 help="Run with the given packages installed in editable mode"
    --  --with-requirements WITH_REQUIREMENTS flag=1 help="Run with all packages listed in the given \`requirements.txt\` files"
    --  --isolated help="Run the command in an isolated virtual environment"
    --  --active help="Prefer the active virtual environment over the project's virtual environment"
    --  --no-sync help="Avoid syncing the virtual environment [env: UV_NO_SYNC=]"
    --  --locked help="Assert that the \`uv.lock\` will remain unchanged [env: UV_LOCKED=]"
    --  --frozen help="Run without updating the \`uv.lock\` file [env: UV_FROZEN=]"
    -- -s --script help="Run the given path as a Python script"
    --  --gui-script help="Run the given path as a Python GUI script"
    --  --all-packages help="Run the command with all workspace members installed"
    --  --package PACKAGE flag=1 help="Run the command in a specific package in the workspace"
    --  --no-project help="Avoid discovering the project or workspace"
    --  --index INDEX flag=1 help="The URLs to use when resolving dependencies, in addition to the default index [env: UV_INDEX=]"
    --  --default-index DEFAULT_INDEX flag=1 help="The URL of the default package index (by default: <https://pypi.org/simple>) [env: UV_DEFAULT_INDEX=]"
    -- -i --index-url INDEX_URL flag=1 help="(Deprecated: use \`--default-index\` instead) The URL of the Python package index (by default: <https://pypi.org/simple>) [env: UV_INDEX_URL=]"
    --  --extra-index-url EXTRA_INDEX_URL flag=1 help="(Deprecated: use \`--index\` instead) Extra URLs of package indexes to use, in addition to \`--index-url\` [env: UV_EXTRA_INDEX_URL=]"
    -- -f --find-links FIND_LINKS flag=1 help="Locations to search for candidate distributions, in addition to those found in the registry indexes [env: UV_FIND_LINKS=]"
    --  --no-index help="Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via \`--find-links\`"
    --  --index-strategy INDEX_STRATEGY flag=1 help="The strategy to use when resolving against multiple index URLs [env: UV_INDEX_STRATEGY=] [possible values: first-index, unsafe-first-match, unsafe-best-match]"
    --  --keyring-provider KEYRING_PROVIDER flag=1 help="Attempt to use \`keyring\` for authentication for index URLs [env: UV_KEYRING_PROVIDER=] [possible values: disabled, subprocess]"
    -- -U --upgrade help="Allow package upgrades, ignoring pinned versions in any existing output file. Implies \`--refresh\`"
    -- -P --upgrade-package UPGRADE_PACKAGE flag=1 help="Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies \`--refresh-package\`"
    --  --resolution RESOLUTION flag=1 help="The strategy to use when selecting between the different compatible versions for a given package requirement [env: UV_RESOLUTION=] [possible values: highest, lowest, lowest-direct]"
    --  --prerelease PRERELEASE flag=1 help="The strategy to use when considering pre-release versions [env: UV_PRERELEASE=] [possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit]"
    --  --fork-strategy FORK_STRATEGY flag=1 help="The strategy to use when selecting multiple versions of a given package across Python versions and platforms [env: UV_FORK_STRATEGY=] [possible values: fewest, requires-python]"
    --  --exclude-newer EXCLUDE_NEWER flag=1 help="Limit candidate packages to those that were uploaded prior to the given date [env: UV_EXCLUDE_NEWER=]"
    --  --no-sources help="Ignore the \`tool.uv.sources\` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources"
    --  --reinstall help="Reinstall all packages, regardless of whether they're already installed. Implies \`--refresh\`"
    --  --reinstall-package REINSTALL_PACKAGE flag=1 help="Reinstall a specific package, regardless of whether it's already installed. Implies \`--refresh-package\`"
    --  --link-mode LINK_MODE flag=1 help="The method to use when installing packages from the global cache [env: UV_LINK_MODE=] [possible values: clone, copy, hardlink, symlink]"
    --  --compile-bytecode help="Compile Python files to bytecode after installation [env: UV_COMPILE_BYTECODE=]"
    -- -C --config-setting CONFIG_SETTING flag=1 help="Settings to pass to the PEP 517 build backend, specified as \`KEY=VALUE\` pairs"
    --  --no-build-isolation help="Disable isolation when building source distributions [env: UV_NO_BUILD_ISOLATION=]"
    --  --no-build-isolation-package NO_BUILD_ISOLATION_PACKAGE flag=1 help="Disable isolation when building source distributions for a specific package"
    --  --no-build help="Don't build source distributions [env: UV_NO_BUILD=]"
    --  --no-build-package NO_BUILD_PACKAGE flag=1 help="Don't build source distributions for a specific package [env: UV_NO_BUILD_PACKAGE=]"
    --  --no-binary help="Don't install pre-built wheels [env: UV_NO_BINARY=]"
    --  --no-binary-package NO_BINARY_PACKAGE flag=1 help="Don't install pre-built wheels for a specific package [env: UV_NO_BINARY_PACKAGE=]"
    -- -n --no-cache help="Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation [env: UV_NO_CACHE=]"
    --  --cache-dir CACHE_DIR flag=1 help="Path to the cache directory [env: UV_CACHE_DIR=]"
    --  --refresh help="Refresh all cached data"
    --  --refresh-package REFRESH_PACKAGE flag=1 help="Refresh cached data for a specific package"
    -- -p --python PYTHON flag=1 help="The Python interpreter to use for the run environment. [env: UV_PYTHON=]"
    --  --managed-python help="Require use of uv-managed Python versions [env: UV_MANAGED_PYTHON=]"
    --  --no-managed-python help="Disable use of uv-managed Python versions [env: UV_NO_MANAGED_PYTHON=]"
    --  --no-python-downloads help="Disable automatic downloads of Python. [env: "UV_PYTHON_DOWNLOADS=never"]"
    -- -q --quiet... help="Use quiet output"
    -- -v --verbose... help="Use verbose output"
    --  --color COLOR_CHOICE flag=1 help="Control the use of color in output [possible values: auto, always, never]"
    --  --native-tls help="Whether to load TLS certificates from the platform's native certificate store [env: UV_NATIVE_TLS=]"
    --  --offline help="Disable network access [env: UV_OFFLINE=]"
    --  --allow-insecure-host ALLOW_INSECURE_HOST flag=1 help="Allow insecure connections to a host [env: UV_INSECURE_HOST=]"
    --  --no-progress help="Hide all progress outputs [env: UV_NO_PROGRESS=]"
    --  --directory DIRECTORY flag=1 help="Change to the given directory prior to running the command"
    --  --project PROJECT flag=1 help="Run the command within the given project directory [env: UV_PROJECT=]"
    --  --config-file CONFIG_FILE flag=1 help="The path to a \`uv.toml\` file to use for configuration [env: UV_CONFIG_FILE=]"
    --  --no-config help="Avoid discovering configuration files (\`pyproject.toml\`, \`uv.toml\`) [env: UV_NO_CONFIG=]"
    -- -h --help help="Display the concise help for this command"
    -- COMMAND nargs="?"
  }

  {
    name=init help="Create a new project"
    --  --name NAME flag=1 help="The name of the project"
    --  --bare help="Only create a \`pyproject.toml\`"
    --  --package help="Set up the project to be built as a Python package"
    --  --no-package help="Do not set up the project to be built as a Python package"
    --  --app help="Create a project for an application"
    --  --lib help="Create a project for a library"
    --  --script help="Create a script"
    --  --description DESCRIPTION flag=1 help="Set the project description"
    --  --no-description help="Disable the description for the project"
    --  --vcs VCS flag=1 help="Initialize a version control system for the project [possible values: git, none]"
    --  --build-backend BUILD_BACKEND flag=1 help="Initialize a build-backend of choice for the project [possible values: hatch, flit, pdm, poetry, setuptools, maturin, scikit]"
    --  --no-readme help="Do not create a \`README.md\` file"
    --  --author-from AUTHOR_FROM flag=1 help="Fill in the \`authors\` field in the \`pyproject.toml\` [possible values: auto, git, none]"
    --  --no-pin-python help="Do not create a \`.python-version\` file for the project"
    --  --no-workspace help="Avoid discovering a workspace and create a standalone project"
    -- -p --python PYTHON flag=1 help="The Python interpreter to use to determine the minimum supported Python version. [env: UV_PYTHON=]"
    --  --managed-python help="Require use of uv-managed Python versions [env: UV_MANAGED_PYTHON=]"
    --  --no-managed-python help="Disable use of uv-managed Python versions [env: UV_NO_MANAGED_PYTHON=]"
    --  --no-python-downloads help="Disable automatic downloads of Python. [env: "UV_PYTHON_DOWNLOADS=never"]"
    -- -n --no-cache help="Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation [env: UV_NO_CACHE=]"
    --  --cache-dir CACHE_DIR flag=1 help="Path to the cache directory [env: UV_CACHE_DIR=]"
    -- -q --quiet... help="Use quiet output"
    -- -v --verbose... help="Use verbose output"
    --  --color COLOR_CHOICE flag=1 help="Control the use of color in output [possible values: auto, always, never]"
    --  --native-tls help="Whether to load TLS certificates from the platform's native certificate store [env: UV_NATIVE_TLS=]"
    --  --offline help="Disable network access [env: UV_OFFLINE=]"
    --  --allow-insecure-host ALLOW_INSECURE_HOST flag=1 help="Allow insecure connections to a host [env: UV_INSECURE_HOST=]"
    --  --no-progress help="Hide all progress outputs [env: UV_NO_PROGRESS=]"
    --  --directory DIRECTORY flag=1 help="Change to the given directory prior to running the command"
    --  --project PROJECT flag=1 help="Run the command within the given project directory [env: UV_PROJECT=]"
    --  --config-file CONFIG_FILE flag=1 help="The path to a \`uv.toml\` file to use for configuration [env: UV_CONFIG_FILE=]"
    --  --no-config help="Avoid discovering configuration files (\`pyproject.toml\`, \`uv.toml\`) [env: UV_NO_CONFIG=]"
    -- -h --help help="Display the concise help for this command"
  }

  {
    name=add help="Add dependencies to the project"
    -- -r --requirements REQUIREMENTS flag=1 help="Add all packages listed in the given \`requirements.txt\` files"
    -- -c --constraints CONSTRAINTS flag=1 help="Constrain versions using the given requirements files [env: UV_CONSTRAINT=]"
    -- -m --marker MARKER flag=1 help="Apply this marker to all added packages"
    --  --dev help="Add the requirements to the development dependency group"
    --  --optional OPTIONAL flag=1 help="Add the requirements to the package's optional dependencies for the specified extra"
    --  --group GROUP flag=1 help="Add the requirements to the specified dependency group"
    --  --editable help="Add the requirements as editable"
    --  --raw help="Add a dependency as provided"
    --  --bounds BOUNDS flag=1 help="The kind of version specifier to use when adding dependencies [possible values: lower, major, minor, exact]"
    --  --rev REV flag=1 help="Commit to use when adding a dependency from Git"
    --  --tag TAG flag=1 help="Tag to use when adding a dependency from Git"
    --  --branch BRANCH flag=1 help="Branch to use when adding a dependency from Git"
    --  --extra EXTRA flag=1 help="Extras to enable for the dependency"
    --  --no-sync help="Avoid syncing the virtual environment [env: UV_NO_SYNC=]"
    --  --locked help="Assert that the \`uv.lock\` will remain unchanged [env: UV_LOCKED=]"
    --  --frozen help="Add dependencies without re-locking the project [env: UV_FROZEN=]"
    --  --active help="Prefer the active virtual environment over the project's virtual environment"
    --  --package PACKAGE flag=1 help="Add the dependency to a specific package in the workspace"
    --  --script SCRIPT flag=1 help="Add the dependency to the specified Python script, rather than to a project"
    --  --index INDEX flag=1 help="The URLs to use when resolving dependencies, in addition to the default index [env: UV_INDEX=]"
    --  --default-index DEFAULT_INDEX flag=1 help="The URL of the default package index (by default: <https://pypi.org/simple>) [env: UV_DEFAULT_INDEX=]"
    -- -i --index-url INDEX_URL flag=1 help="(Deprecated: use \`--default-index\` instead) The URL of the Python package index (by default: <https://pypi.org/simple>) [env: UV_INDEX_URL=]"
    --  --extra-index-url EXTRA_INDEX_URL flag=1 help="(Deprecated: use \`--index\` instead) Extra URLs of package indexes to use, in addition to \`--index-url\` [env: UV_EXTRA_INDEX_URL=]"
    -- -f --find-links FIND_LINKS flag=1 help="Locations to search for candidate distributions, in addition to those found in the registry indexes [env: UV_FIND_LINKS=]"
    --  --no-index help="Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via \`--find-links\`"
    --  --index-strategy INDEX_STRATEGY flag=1 help="The strategy to use when resolving against multiple index URLs [env: UV_INDEX_STRATEGY=] [possible values: first-index, unsafe-first-match, unsafe-best-match]"
    --  --keyring-provider KEYRING_PROVIDER flag=1 help="Attempt to use \`keyring\` for authentication for index URLs [env: UV_KEYRING_PROVIDER=] [possible values: disabled, subprocess]"
    -- -U --upgrade help="Allow package upgrades, ignoring pinned versions in any existing output file. Implies \`--refresh\`"
    -- -P --upgrade-package UPGRADE_PACKAGE flag=1 help="Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies \`--refresh-package\`"
    --  --resolution RESOLUTION flag=1 help="The strategy to use when selecting between the different compatible versions for a given package requirement [env: UV_RESOLUTION=] [possible values: highest, lowest, lowest-direct]"
    --  --prerelease PRERELEASE flag=1 help="The strategy to use when considering pre-release versions [env: UV_PRERELEASE=] [possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit]"
    --  --fork-strategy FORK_STRATEGY flag=1 help="The strategy to use when selecting multiple versions of a given package across Python versions and platforms [env: UV_FORK_STRATEGY=] [possible values: fewest, requires-python]"
    --  --exclude-newer EXCLUDE_NEWER flag=1 help="Limit candidate packages to those that were uploaded prior to the given date [env: UV_EXCLUDE_NEWER=]"
    --  --no-sources help="Ignore the \`tool.uv.sources\` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources"
    --  --reinstall help="Reinstall all packages, regardless of whether they're already installed. Implies \`--refresh\`"
    --  --reinstall-package REINSTALL_PACKAGE flag=1 help="Reinstall a specific package, regardless of whether it's already installed. Implies \`--refresh-package\`"
    --  --link-mode LINK_MODE flag=1 help="The method to use when installing packages from the global cache [env: UV_LINK_MODE=] [possible values: clone, copy, hardlink, symlink]"
    --  --compile-bytecode help="Compile Python files to bytecode after installation [env: UV_COMPILE_BYTECODE=]"
    -- -C --config-setting CONFIG_SETTING flag=1 help="Settings to pass to the PEP 517 build backend, specified as \`KEY=VALUE\` pairs"
    --  --no-build-isolation help="Disable isolation when building source distributions [env: UV_NO_BUILD_ISOLATION=]"
    --  --no-build-isolation-package NO_BUILD_ISOLATION_PACKAGE flag=1 help="Disable isolation when building source distributions for a specific package"
    --  --no-build help="Don't build source distributions [env: UV_NO_BUILD=]"
    --  --no-build-package NO_BUILD_PACKAGE flag=1 help="Don't build source distributions for a specific package [env: UV_NO_BUILD_PACKAGE=]"
    --  --no-binary help="Don't install pre-built wheels [env: UV_NO_BINARY=]"
    --  --no-binary-package NO_BINARY_PACKAGE flag=1 help="Don't install pre-built wheels for a specific package [env: UV_NO_BINARY_PACKAGE=]"
    -- -n --no-cache help="Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation [env: UV_NO_CACHE=]"
    --  --cache-dir CACHE_DIR flag=1 help="Path to the cache directory [env: UV_CACHE_DIR=]"
    --  --refresh help="Refresh all cached data"
    --  --refresh-package REFRESH_PACKAGE flag=1 help="Refresh cached data for a specific package"
    -- -p --python PYTHON flag=1 help="The Python interpreter to use for resolving and syncing. [env: UV_PYTHON=]"
    --  --managed-python help="Require use of uv-managed Python versions [env: UV_MANAGED_PYTHON=]"
    --  --no-managed-python help="Disable use of uv-managed Python versions [env: UV_NO_MANAGED_PYTHON=]"
    --  --no-python-downloads help="Disable automatic downloads of Python. [env: "UV_PYTHON_DOWNLOADS=never"]"
    -- -q --quiet... help="Use quiet output"
    -- -v --verbose... help="Use verbose output"
    --  --color COLOR_CHOICE flag=1 help="Control the use of color in output [possible values: auto, always, never]"
    --  --native-tls help="Whether to load TLS certificates from the platform's native certificate store [env: UV_NATIVE_TLS=]"
    --  --offline help="Disable network access [env: UV_OFFLINE=]"
    --  --allow-insecure-host ALLOW_INSECURE_HOST flag=1 help="Allow insecure connections to a host [env: UV_INSECURE_HOST=]"
    --  --no-progress help="Hide all progress outputs [env: UV_NO_PROGRESS=]"
    --  --directory DIRECTORY flag=1 help="Change to the given directory prior to running the command"
    --  --project PROJECT flag=1 help="Run the command within the given project directory [env: UV_PROJECT=]"
    --  --config-file CONFIG_FILE flag=1 help="The path to a \`uv.toml\` file to use for configuration [env: UV_CONFIG_FILE=]"
    --  --no-config help="Avoid discovering configuration files (\`pyproject.toml\`, \`uv.toml\`) [env: UV_NO_CONFIG=]"
    -- -h --help help="Display the concise help for this command"
  }

  {
    name=remove help="Remove dependencies from the project"
    --  --dev help="Remove the packages from the development dependency group"
    --  --optional OPTIONAL flag=1 help="Remove the packages from the project's optional dependencies for the specified extra"
    --  --group GROUP flag=1 help="Remove the packages from the specified dependency group"
    --  --no-sync help="Avoid syncing the virtual environment after re-locking the project [env: UV_NO_SYNC=]"
    --  --active help="Prefer the active virtual environment over the project's virtual environment"
    --  --locked help="Assert that the \`uv.lock\` will remain unchanged [env: UV_LOCKED=]"
    --  --frozen help="Remove dependencies without re-locking the project [env: UV_FROZEN=]"
    --  --package PACKAGE flag=1 help="Remove the dependencies from a specific package in the workspace"
    --  --script SCRIPT flag=1 help="Remove the dependency from the specified Python script, rather than from a project"
    --  --index INDEX flag=1 help="The URLs to use when resolving dependencies, in addition to the default index [env: UV_INDEX=]"
    --  --default-index DEFAULT_INDEX flag=1 help="The URL of the default package index (by default: <https://pypi.org/simple>) [env: UV_DEFAULT_INDEX=]"
    -- -i --index-url INDEX_URL flag=1 help="(Deprecated: use \`--default-index\` instead) The URL of the Python package index (by default: <https://pypi.org/simple>) [env: UV_INDEX_URL=]"
    --  --extra-index-url EXTRA_INDEX_URL flag=1 help="(Deprecated: use \`--index\` instead) Extra URLs of package indexes to use, in addition to \`--index-url\` [env: UV_EXTRA_INDEX_URL=]"
    -- -f --find-links FIND_LINKS flag=1 help="Locations to search for candidate distributions, in addition to those found in the registry indexes [env: UV_FIND_LINKS=]"
    --  --no-index help="Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via \`--find-links\`"
    --  --index-strategy INDEX_STRATEGY flag=1 help="The strategy to use when resolving against multiple index URLs [env: UV_INDEX_STRATEGY=] [possible values: first-index, unsafe-first-match, unsafe-best-match]"
    --  --keyring-provider KEYRING_PROVIDER flag=1 help="Attempt to use \`keyring\` for authentication for index URLs [env: UV_KEYRING_PROVIDER=] [possible values: disabled, subprocess]"
    -- -U --upgrade help="Allow package upgrades, ignoring pinned versions in any existing output file. Implies \`--refresh\`"
    -- -P --upgrade-package UPGRADE_PACKAGE flag=1 help="Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies \`--refresh-package\`"
    --  --resolution RESOLUTION flag=1 help="The strategy to use when selecting between the different compatible versions for a given package requirement [env: UV_RESOLUTION=] [possible values: highest, lowest, lowest-direct]"
    --  --prerelease PRERELEASE flag=1 help="The strategy to use when considering pre-release versions [env: UV_PRERELEASE=] [possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit]"
    --  --fork-strategy FORK_STRATEGY flag=1 help="The strategy to use when selecting multiple versions of a given package across Python versions and platforms [env: UV_FORK_STRATEGY=] [possible values: fewest, requires-python]"
    --  --exclude-newer EXCLUDE_NEWER flag=1 help="Limit candidate packages to those that were uploaded prior to the given date [env: UV_EXCLUDE_NEWER=]"
    --  --no-sources help="Ignore the \`tool.uv.sources\` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources"
    --  --reinstall help="Reinstall all packages, regardless of whether they're already installed. Implies \`--refresh\`"
    --  --reinstall-package REINSTALL_PACKAGE flag=1 help="Reinstall a specific package, regardless of whether it's already installed. Implies \`--refresh-package\`"
    --  --link-mode LINK_MODE flag=1 help="The method to use when installing packages from the global cache [env: UV_LINK_MODE=] [possible values: clone, copy, hardlink, symlink]"
    --  --compile-bytecode help="Compile Python files to bytecode after installation [env: UV_COMPILE_BYTECODE=]"
    -- -C --config-setting CONFIG_SETTING flag=1 help="Settings to pass to the PEP 517 build backend, specified as \`KEY=VALUE\` pairs"
    --  --no-build-isolation help="Disable isolation when building source distributions [env: UV_NO_BUILD_ISOLATION=]"
    --  --no-build-isolation-package NO_BUILD_ISOLATION_PACKAGE flag=1 help="Disable isolation when building source distributions for a specific package"
    --  --no-build help="Don't build source distributions [env: UV_NO_BUILD=]"
    --  --no-build-package NO_BUILD_PACKAGE flag=1 help="Don't build source distributions for a specific package [env: UV_NO_BUILD_PACKAGE=]"
    --  --no-binary help="Don't install pre-built wheels [env: UV_NO_BINARY=]"
    --  --no-binary-package NO_BINARY_PACKAGE flag=1 help="Don't install pre-built wheels for a specific package [env: UV_NO_BINARY_PACKAGE=]"
    -- -n --no-cache help="Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation [env: UV_NO_CACHE=]"
    --  --cache-dir CACHE_DIR flag=1 help="Path to the cache directory [env: UV_CACHE_DIR=]"
    --  --refresh help="Refresh all cached data"
    --  --refresh-package REFRESH_PACKAGE flag=1 help="Refresh cached data for a specific package"
    -- -p --python PYTHON flag=1 help="The Python interpreter to use for resolving and syncing. [env: UV_PYTHON=]"
    --  --managed-python help="Require use of uv-managed Python versions [env: UV_MANAGED_PYTHON=]"
    --  --no-managed-python help="Disable use of uv-managed Python versions [env: UV_NO_MANAGED_PYTHON=]"
    --  --no-python-downloads help="Disable automatic downloads of Python. [env: "UV_PYTHON_DOWNLOADS=never"]"
    -- -q --quiet... help="Use quiet output"
    -- -v --verbose... help="Use verbose output"
    --  --color COLOR_CHOICE flag=1 help="Control the use of color in output [possible values: auto, always, never]"
    --  --native-tls help="Whether to load TLS certificates from the platform's native certificate store [env: UV_NATIVE_TLS=]"
    --  --offline help="Disable network access [env: UV_OFFLINE=]"
    --  --allow-insecure-host ALLOW_INSECURE_HOST flag=1 help="Allow insecure connections to a host [env: UV_INSECURE_HOST=]"
    --  --no-progress help="Hide all progress outputs [env: UV_NO_PROGRESS=]"
    --  --directory DIRECTORY flag=1 help="Change to the given directory prior to running the command"
    --  --project PROJECT flag=1 help="Run the command within the given project directory [env: UV_PROJECT=]"
    --  --config-file CONFIG_FILE flag=1 help="The path to a \`uv.toml\` file to use for configuration [env: UV_CONFIG_FILE=]"
    --  --no-config help="Avoid discovering configuration files (\`pyproject.toml\`, \`uv.toml\`) [env: UV_NO_CONFIG=]"
    -- -h --help help="Display the concise help for this command"
  }

  {
    name=version help="Read or update the project's version"
    --  --bump BUMP flag=1 help="Update the project version using the given semantics [possible values: major, minor, patch]"
    --  --dry-run help="Don't write a new version to the \`pyproject.toml\`"
    --  --short help="Only show the version"
    --  --output-format OUTPUT_FORMAT flag=1 help="The format of the output [default: text] [possible values: text, json]"
    --  --no-sync help="Avoid syncing the virtual environment after re-locking the project [env: UV_NO_SYNC=]"
    --  --active help="Prefer the active virtual environment over the project's virtual environment"
    --  --locked help="Assert that the \`uv.lock\` will remain unchanged [env: UV_LOCKED=]"
    --  --frozen help="Update the version without re-locking the project [env: UV_FROZEN=]"
    --  --package PACKAGE flag=1 help="Update the version of a specific package in the workspace"
    --  --index INDEX flag=1 help="The URLs to use when resolving dependencies, in addition to the default index [env: UV_INDEX=]"
    --  --default-index DEFAULT_INDEX flag=1 help="The URL of the default package index (by default: <https://pypi.org/simple>) [env: UV_DEFAULT_INDEX=]"
    -- -i --index-url INDEX_URL flag=1 help="(Deprecated: use \`--default-index\` instead) The URL of the Python package index (by default: <https://pypi.org/simple>) [env: UV_INDEX_URL=]"
    --  --extra-index-url EXTRA_INDEX_URL flag=1 help="(Deprecated: use \`--index\` instead) Extra URLs of package indexes to use, in addition to \`--index-url\` [env: UV_EXTRA_INDEX_URL=]"
    -- -f --find-links FIND_LINKS flag=1 help="Locations to search for candidate distributions, in addition to those found in the registry indexes [env: UV_FIND_LINKS=]"
    --  --no-index help="Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via \`--find-links\`"
    --  --index-strategy INDEX_STRATEGY flag=1 help="The strategy to use when resolving against multiple index URLs [env: UV_INDEX_STRATEGY=] [possible values: first-index, unsafe-first-match, unsafe-best-match]"
    --  --keyring-provider KEYRING_PROVIDER flag=1 help="Attempt to use \`keyring\` for authentication for index URLs [env: UV_KEYRING_PROVIDER=] [possible values: disabled, subprocess]"
    -- -U --upgrade help="Allow package upgrades, ignoring pinned versions in any existing output file. Implies \`--refresh\`"
    -- -P --upgrade-package UPGRADE_PACKAGE flag=1 help="Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies \`--refresh-package\`"
    --  --resolution RESOLUTION flag=1 help="The strategy to use when selecting between the different compatible versions for a given package requirement [env: UV_RESOLUTION=] [possible values: highest, lowest, lowest-direct]"
    --  --prerelease PRERELEASE flag=1 help="The strategy to use when considering pre-release versions [env: UV_PRERELEASE=] [possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit]"
    --  --fork-strategy FORK_STRATEGY flag=1 help="The strategy to use when selecting multiple versions of a given package across Python versions and platforms [env: UV_FORK_STRATEGY=] [possible values: fewest, requires-python]"
    --  --exclude-newer EXCLUDE_NEWER flag=1 help="Limit candidate packages to those that were uploaded prior to the given date [env: UV_EXCLUDE_NEWER=]"
    --  --no-sources help="Ignore the \`tool.uv.sources\` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources"
    --  --reinstall help="Reinstall all packages, regardless of whether they're already installed. Implies \`--refresh\`"
    --  --reinstall-package REINSTALL_PACKAGE flag=1 help="Reinstall a specific package, regardless of whether it's already installed. Implies \`--refresh-package\`"
    --  --link-mode LINK_MODE flag=1 help="The method to use when installing packages from the global cache [env: UV_LINK_MODE=] [possible values: clone, copy, hardlink, symlink]"
    --  --compile-bytecode help="Compile Python files to bytecode after installation [env: UV_COMPILE_BYTECODE=]"
    -- -C --config-setting CONFIG_SETTING flag=1 help="Settings to pass to the PEP 517 build backend, specified as \`KEY=VALUE\` pairs"
    --  --no-build-isolation help="Disable isolation when building source distributions [env: UV_NO_BUILD_ISOLATION=]"
    --  --no-build-isolation-package NO_BUILD_ISOLATION_PACKAGE flag=1 help="Disable isolation when building source distributions for a specific package"
    --  --no-build help="Don't build source distributions [env: UV_NO_BUILD=]"
    --  --no-build-package NO_BUILD_PACKAGE flag=1 help="Don't build source distributions for a specific package [env: UV_NO_BUILD_PACKAGE=]"
    --  --no-binary help="Don't install pre-built wheels [env: UV_NO_BINARY=]"
    --  --no-binary-package NO_BINARY_PACKAGE flag=1 help="Don't install pre-built wheels for a specific package [env: UV_NO_BINARY_PACKAGE=]"
    -- -n --no-cache help="Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation [env: UV_NO_CACHE=]"
    --  --cache-dir CACHE_DIR flag=1 help="Path to the cache directory [env: UV_CACHE_DIR=]"
    --  --refresh help="Refresh all cached data"
    --  --refresh-package REFRESH_PACKAGE flag=1 help="Refresh cached data for a specific package"
    -- -p --python PYTHON flag=1 help="The Python interpreter to use for resolving and syncing. [env: UV_PYTHON=]"
    --  --managed-python help="Require use of uv-managed Python versions [env: UV_MANAGED_PYTHON=]"
    --  --no-managed-python help="Disable use of uv-managed Python versions [env: UV_NO_MANAGED_PYTHON=]"
    --  --no-python-downloads help="Disable automatic downloads of Python. [env: "UV_PYTHON_DOWNLOADS=never"]"
    -- -q --quiet... help="Use quiet output"
    -- -v --verbose... help="Use verbose output"
    --  --color COLOR_CHOICE flag=1 help="Control the use of color in output [possible values: auto, always, never]"
    --  --native-tls help="Whether to load TLS certificates from the platform's native certificate store [env: UV_NATIVE_TLS=]"
    --  --offline help="Disable network access [env: UV_OFFLINE=]"
    --  --allow-insecure-host ALLOW_INSECURE_HOST flag=1 help="Allow insecure connections to a host [env: UV_INSECURE_HOST=]"
    --  --no-progress help="Hide all progress outputs [env: UV_NO_PROGRESS=]"
    --  --directory DIRECTORY flag=1 help="Change to the given directory prior to running the command"
    --  --project PROJECT flag=1 help="Run the command within the given project directory [env: UV_PROJECT=]"
    --  --config-file CONFIG_FILE flag=1 help="The path to a \`uv.toml\` file to use for configuration [env: UV_CONFIG_FILE=]"
    --  --no-config help="Avoid discovering configuration files (\`pyproject.toml\`, \`uv.toml\`) [env: UV_NO_CONFIG=]"
    -- -h --help help="Display the concise help for this command"
  }

  {
    name=sync help="Update the project's environment"
    --  --extra EXTRA flag=1 help="Include optional dependencies from the specified extra name"
    --  --all-extras help="Include all optional dependencies"
    --  --no-extra NO_EXTRA flag=1 help="Exclude the specified optional dependencies, if \`--all-extras\` is supplied"
    --  --no-dev help="Disable the development dependency group"
    --  --only-dev help="Only include the development dependency group"
    --  --group GROUP flag=1 help="Include dependencies from the specified dependency group"
    --  --no-group NO_GROUP flag=1 help="Disable the specified dependency group"
    --  --no-default-groups help="Ignore the default dependency groups"
    --  --only-group ONLY_GROUP flag=1 help="Only include dependencies from the specified dependency group"
    --  --all-groups help="Include dependencies from all dependency groups"
    --  --no-editable help="Install any editable dependencies, including the project and any workspace members, as non-editable [env: UV_NO_EDITABLE=]"
    --  --inexact help="Do not remove extraneous packages present in the environment"
    --  --active help="Sync dependencies to the active virtual environment"
    --  --no-install-project help="Do not install the current project"
    --  --no-install-workspace help="Do not install any workspace members, including the root project"
    --  --no-install-package NO_INSTALL_PACKAGE flag=1 help="Do not install the given package(s)"
    --  --locked help="Assert that the \`uv.lock\` will remain unchanged [env: UV_LOCKED=]"
    --  --frozen help="Sync without updating the \`uv.lock\` file [env: UV_FROZEN=]"
    --  --dry-run help="Perform a dry run, without writing the lockfile or modifying the project environment"
    --  --all-packages help="Sync all packages in the workspace"
    --  --package PACKAGE flag=1 help="Sync for a specific package in the workspace"
    --  --script SCRIPT flag=1 help="Sync the environment for a Python script, rather than the current project"
    --  --check help="Check if the Python environment is synchronized with the project"
    --  --index INDEX flag=1 help="The URLs to use when resolving dependencies, in addition to the default index [env: UV_INDEX=]"
    --  --default-index DEFAULT_INDEX flag=1 help="The URL of the default package index (by default: <https://pypi.org/simple>) [env: UV_DEFAULT_INDEX=]"
    -- -i --index-url INDEX_URL flag=1 help="(Deprecated: use \`--default-index\` instead) The URL of the Python package index (by default: <https://pypi.org/simple>) [env: UV_INDEX_URL=]"
    --  --extra-index-url EXTRA_INDEX_URL flag=1 help="(Deprecated: use \`--index\` instead) Extra URLs of package indexes to use, in addition to \`--index-url\` [env: UV_EXTRA_INDEX_URL=]"
    -- -f --find-links FIND_LINKS flag=1 help="Locations to search for candidate distributions, in addition to those found in the registry indexes [env: UV_FIND_LINKS=]"
    --  --no-index help="Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via \`--find-links\`"
    --  --index-strategy INDEX_STRATEGY flag=1 help="The strategy to use when resolving against multiple index URLs [env: UV_INDEX_STRATEGY=] [possible values: first-index, unsafe-first-match, unsafe-best-match]"
    --  --keyring-provider KEYRING_PROVIDER flag=1 help="Attempt to use \`keyring\` for authentication for index URLs [env: UV_KEYRING_PROVIDER=] [possible values: disabled, subprocess]"
    -- -U --upgrade help="Allow package upgrades, ignoring pinned versions in any existing output file. Implies \`--refresh\`"
    -- -P --upgrade-package UPGRADE_PACKAGE flag=1 help="Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies \`--refresh-package\`"
    --  --resolution RESOLUTION flag=1 help="The strategy to use when selecting between the different compatible versions for a given package requirement [env: UV_RESOLUTION=] [possible values: highest, lowest, lowest-direct]"
    --  --prerelease PRERELEASE flag=1 help="The strategy to use when considering pre-release versions [env: UV_PRERELEASE=] [possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit]"
    --  --fork-strategy FORK_STRATEGY flag=1 help="The strategy to use when selecting multiple versions of a given package across Python versions and platforms [env: UV_FORK_STRATEGY=] [possible values: fewest, requires-python]"
    --  --exclude-newer EXCLUDE_NEWER flag=1 help="Limit candidate packages to those that were uploaded prior to the given date [env: UV_EXCLUDE_NEWER=]"
    --  --no-sources help="Ignore the \`tool.uv.sources\` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources"
    --  --reinstall help="Reinstall all packages, regardless of whether they're already installed. Implies \`--refresh\`"
    --  --reinstall-package REINSTALL_PACKAGE flag=1 help="Reinstall a specific package, regardless of whether it's already installed. Implies \`--refresh-package\`"
    --  --link-mode LINK_MODE flag=1 help="The method to use when installing packages from the global cache [env: UV_LINK_MODE=] [possible values: clone, copy, hardlink, symlink]"
    --  --compile-bytecode help="Compile Python files to bytecode after installation [env: UV_COMPILE_BYTECODE=]"
    -- -C --config-setting CONFIG_SETTING flag=1 help="Settings to pass to the PEP 517 build backend, specified as \`KEY=VALUE\` pairs"
    --  --no-build-isolation help="Disable isolation when building source distributions [env: UV_NO_BUILD_ISOLATION=]"
    --  --no-build-isolation-package NO_BUILD_ISOLATION_PACKAGE flag=1 help="Disable isolation when building source distributions for a specific package"
    --  --no-build help="Don't build source distributions [env: UV_NO_BUILD=]"
    --  --no-build-package NO_BUILD_PACKAGE flag=1 help="Don't build source distributions for a specific package [env: UV_NO_BUILD_PACKAGE=]"
    --  --no-binary help="Don't install pre-built wheels [env: UV_NO_BINARY=]"
    --  --no-binary-package NO_BINARY_PACKAGE flag=1 help="Don't install pre-built wheels for a specific package [env: UV_NO_BINARY_PACKAGE=]"
    -- -n --no-cache help="Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation [env: UV_NO_CACHE=]"
    --  --cache-dir CACHE_DIR flag=1 help="Path to the cache directory [env: UV_CACHE_DIR=]"
    --  --refresh help="Refresh all cached data"
    --  --refresh-package REFRESH_PACKAGE flag=1 help="Refresh cached data for a specific package"
    -- -p --python PYTHON flag=1 help="The Python interpreter to use for the project environment. [env: UV_PYTHON=]"
    --  --managed-python help="Require use of uv-managed Python versions [env: UV_MANAGED_PYTHON=]"
    --  --no-managed-python help="Disable use of uv-managed Python versions [env: UV_NO_MANAGED_PYTHON=]"
    --  --no-python-downloads help="Disable automatic downloads of Python. [env: "UV_PYTHON_DOWNLOADS=never"]"
    -- -q --quiet... help="Use quiet output"
    -- -v --verbose... help="Use verbose output"
    --  --color COLOR_CHOICE flag=1 help="Control the use of color in output [possible values: auto, always, never]"
    --  --native-tls help="Whether to load TLS certificates from the platform's native certificate store [env: UV_NATIVE_TLS=]"
    --  --offline help="Disable network access [env: UV_OFFLINE=]"
    --  --allow-insecure-host ALLOW_INSECURE_HOST flag=1 help="Allow insecure connections to a host [env: UV_INSECURE_HOST=]"
    --  --no-progress help="Hide all progress outputs [env: UV_NO_PROGRESS=]"
    --  --directory DIRECTORY flag=1 help="Change to the given directory prior to running the command"
    --  --project PROJECT flag=1 help="Run the command within the given project directory [env: UV_PROJECT=]"
    --  --config-file CONFIG_FILE flag=1 help="The path to a \`uv.toml\` file to use for configuration [env: UV_CONFIG_FILE=]"
    --  --no-config help="Avoid discovering configuration files (\`pyproject.toml\`, \`uv.toml\`) [env: UV_NO_CONFIG=]"
    -- -h --help help="Display the concise help for this command"
  }

  {
    name=lock help="Update the project's lockfile"
    --  --check help="Check if the lockfile is up-to-date [env: UV_LOCKED=]"
    --  --check-exists help="Assert that a \`uv.lock\` exists without checking if it is up-to-date [env: UV_FROZEN=]"
    --  --dry-run help="Perform a dry run, without writing the lockfile"
    --  --script SCRIPT flag=1 help="Lock the specified Python script, rather than the current project"
    --  --index INDEX flag=1 help="The URLs to use when resolving dependencies, in addition to the default index [env: UV_INDEX=]"
    --  --default-index DEFAULT_INDEX flag=1 help="The URL of the default package index (by default: <https://pypi.org/simple>) [env: UV_DEFAULT_INDEX=]"
    -- -i --index-url INDEX_URL flag=1 help="(Deprecated: use \`--default-index\` instead) The URL of the Python package index (by default: <https://pypi.org/simple>) [env: UV_INDEX_URL=]"
    --  --extra-index-url EXTRA_INDEX_URL flag=1 help="(Deprecated: use \`--index\` instead) Extra URLs of package indexes to use, in addition to \`--index-url\` [env: UV_EXTRA_INDEX_URL=]"
    -- -f --find-links FIND_LINKS flag=1 help="Locations to search for candidate distributions, in addition to those found in the registry indexes [env: UV_FIND_LINKS=]"
    --  --no-index help="Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via \`--find-links\`"
    --  --index-strategy INDEX_STRATEGY flag=1 help="The strategy to use when resolving against multiple index URLs [env: UV_INDEX_STRATEGY=] [possible values: first-index, unsafe-first-match, unsafe-best-match]"
    --  --keyring-provider KEYRING_PROVIDER flag=1 help="Attempt to use \`keyring\` for authentication for index URLs [env: UV_KEYRING_PROVIDER=] [possible values: disabled, subprocess]"
    -- -U --upgrade help="Allow package upgrades, ignoring pinned versions in any existing output file. Implies \`--refresh\`"
    -- -P --upgrade-package UPGRADE_PACKAGE flag=1 help="Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies \`--refresh-package\`"
    --  --resolution RESOLUTION flag=1 help="The strategy to use when selecting between the different compatible versions for a given package requirement [env: UV_RESOLUTION=] [possible values: highest, lowest, lowest-direct]"
    --  --prerelease PRERELEASE flag=1 help="The strategy to use when considering pre-release versions [env: UV_PRERELEASE=] [possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit]"
    --  --fork-strategy FORK_STRATEGY flag=1 help="The strategy to use when selecting multiple versions of a given package across Python versions and platforms [env: UV_FORK_STRATEGY=] [possible values: fewest, requires-python]"
    --  --exclude-newer EXCLUDE_NEWER flag=1 help="Limit candidate packages to those that were uploaded prior to the given date [env: UV_EXCLUDE_NEWER=]"
    --  --no-sources help="Ignore the \`tool.uv.sources\` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources"
    -- -C --config-setting CONFIG_SETTING flag=1 help="Settings to pass to the PEP 517 build backend, specified as \`KEY=VALUE\` pairs"
    --  --no-build-isolation help="Disable isolation when building source distributions [env: UV_NO_BUILD_ISOLATION=]"
    --  --no-build-isolation-package NO_BUILD_ISOLATION_PACKAGE flag=1 help="Disable isolation when building source distributions for a specific package"
    --  --no-build help="Don't build source distributions [env: UV_NO_BUILD=]"
    --  --no-build-package NO_BUILD_PACKAGE flag=1 help="Don't build source distributions for a specific package [env: UV_NO_BUILD_PACKAGE=]"
    --  --no-binary help="Don't install pre-built wheels [env: UV_NO_BINARY=]"
    --  --no-binary-package NO_BINARY_PACKAGE flag=1 help="Don't install pre-built wheels for a specific package [env: UV_NO_BINARY_PACKAGE=]"
    --  --link-mode LINK_MODE flag=1 help="The method to use when installing packages from the global cache [env: UV_LINK_MODE=] [possible values: clone, copy, hardlink, symlink]"
    -- -n --no-cache help="Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation [env: UV_NO_CACHE=]"
    --  --cache-dir CACHE_DIR flag=1 help="Path to the cache directory [env: UV_CACHE_DIR=]"
    --  --refresh help="Refresh all cached data"
    --  --refresh-package REFRESH_PACKAGE flag=1 help="Refresh cached data for a specific package"
    -- -p --python PYTHON flag=1 help="The Python interpreter to use during resolution. [env: UV_PYTHON=]"
    --  --managed-python help="Require use of uv-managed Python versions [env: UV_MANAGED_PYTHON=]"
    --  --no-managed-python help="Disable use of uv-managed Python versions [env: UV_NO_MANAGED_PYTHON=]"
    --  --no-python-downloads help="Disable automatic downloads of Python. [env: "UV_PYTHON_DOWNLOADS=never"]"
    -- -q --quiet... help="Use quiet output"
    -- -v --verbose... help="Use verbose output"
    --  --color COLOR_CHOICE flag=1 help="Control the use of color in output [possible values: auto, always, never]"
    --  --native-tls help="Whether to load TLS certificates from the platform's native certificate store [env: UV_NATIVE_TLS=]"
    --  --offline help="Disable network access [env: UV_OFFLINE=]"
    --  --allow-insecure-host ALLOW_INSECURE_HOST flag=1 help="Allow insecure connections to a host [env: UV_INSECURE_HOST=]"
    --  --no-progress help="Hide all progress outputs [env: UV_NO_PROGRESS=]"
    --  --directory DIRECTORY flag=1 help="Change to the given directory prior to running the command"
    --  --project PROJECT flag=1 help="Run the command within the given project directory [env: UV_PROJECT=]"
    --  --config-file CONFIG_FILE flag=1 help="The path to a \`uv.toml\` file to use for configuration [env: UV_CONFIG_FILE=]"
    --  --no-config help="Avoid discovering configuration files (\`pyproject.toml\`, \`uv.toml\`) [env: UV_NO_CONFIG=]"
    -- -h --help help="Display the concise help for this command"
  }

  {
    name=export help="Export the project's lockfile to an alternate format"
    --  --format FORMAT flag=1 help="The format to which \`uv.lock\` should be exported [possible values: requirements.txt, pylock.toml]"
    --  --all-packages help="Export the entire workspace"
    --  --package PACKAGE flag=1 help="Export the dependencies for a specific package in the workspace"
    --  --prune PACKAGE flag=1 help="Prune the given package from the dependency tree"
    --  --extra EXTRA flag=1 help="Include optional dependencies from the specified extra name"
    --  --all-extras help="Include all optional dependencies"
    --  --no-extra NO_EXTRA flag=1 help="Exclude the specified optional dependencies, if \`--all-extras\` is supplied"
    --  --no-dev help="Disable the development dependency group"
    --  --only-dev help="Only include the development dependency group"
    --  --group GROUP flag=1 help="Include dependencies from the specified dependency group"
    --  --no-group NO_GROUP flag=1 help="Disable the specified dependency group"
    --  --no-default-groups help="Ignore the default dependency groups"
    --  --only-group ONLY_GROUP flag=1 help="Only include dependencies from the specified dependency group"
    --  --all-groups help="Include dependencies from all dependency groups"
    --  --no-annotate help="Exclude comment annotations indicating the source of each package"
    --  --no-header help="Exclude the comment header at the top of the generated output file"
    --  --no-editable help="Export any editable dependencies, including the project and any workspace members, as non-editable"
    --  --no-hashes help="Omit hashes in the generated output"
    -- -o --output-file OUTPUT_FILE flag=1 help="Write the exported requirements to the given file"
    --  --no-emit-project help="Do not emit the current project"
    --  --no-emit-workspace help="Do not emit any workspace members, including the root project"
    --  --no-emit-package NO_EMIT_PACKAGE flag=1 help="Do not emit the given package(s)"
    --  --locked help="Assert that the \`uv.lock\` will remain unchanged [env: UV_LOCKED=]"
    --  --frozen help="Do not update the \`uv.lock\` before exporting [env: UV_FROZEN=]"
    --  --script SCRIPT flag=1 help="Export the dependencies for the specified PEP 723 Python script, rather than the current project"
    --  --index INDEX flag=1 help="The URLs to use when resolving dependencies, in addition to the default index [env: UV_INDEX=]"
    --  --default-index DEFAULT_INDEX flag=1 help="The URL of the default package index (by default: <https://pypi.org/simple>) [env: UV_DEFAULT_INDEX=]"
    -- -i --index-url INDEX_URL flag=1 help="(Deprecated: use \`--default-index\` instead) The URL of the Python package index (by default: <https://pypi.org/simple>) [env: UV_INDEX_URL=]"
    --  --extra-index-url EXTRA_INDEX_URL flag=1 help="(Deprecated: use \`--index\` instead) Extra URLs of package indexes to use, in addition to \`--index-url\` [env: UV_EXTRA_INDEX_URL=]"
    -- -f --find-links FIND_LINKS flag=1 help="Locations to search for candidate distributions, in addition to those found in the registry indexes [env: UV_FIND_LINKS=]"
    --  --no-index help="Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via \`--find-links\`"
    --  --index-strategy INDEX_STRATEGY flag=1 help="The strategy to use when resolving against multiple index URLs [env: UV_INDEX_STRATEGY=] [possible values: first-index, unsafe-first-match, unsafe-best-match]"
    --  --keyring-provider KEYRING_PROVIDER flag=1 help="Attempt to use \`keyring\` for authentication for index URLs [env: UV_KEYRING_PROVIDER=] [possible values: disabled, subprocess]"
    -- -U --upgrade help="Allow package upgrades, ignoring pinned versions in any existing output file. Implies \`--refresh\`"
    -- -P --upgrade-package UPGRADE_PACKAGE flag=1 help="Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies \`--refresh-package\`"
    --  --resolution RESOLUTION flag=1 help="The strategy to use when selecting between the different compatible versions for a given package requirement [env: UV_RESOLUTION=] [possible values: highest, lowest, lowest-direct]"
    --  --prerelease PRERELEASE flag=1 help="The strategy to use when considering pre-release versions [env: UV_PRERELEASE=] [possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit]"
    --  --fork-strategy FORK_STRATEGY flag=1 help="The strategy to use when selecting multiple versions of a given package across Python versions and platforms [env: UV_FORK_STRATEGY=] [possible values: fewest, requires-python]"
    --  --exclude-newer EXCLUDE_NEWER flag=1 help="Limit candidate packages to those that were uploaded prior to the given date [env: UV_EXCLUDE_NEWER=]"
    --  --no-sources help="Ignore the \`tool.uv.sources\` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources"
    -- -C --config-setting CONFIG_SETTING flag=1 help="Settings to pass to the PEP 517 build backend, specified as \`KEY=VALUE\` pairs"
    --  --no-build-isolation help="Disable isolation when building source distributions [env: UV_NO_BUILD_ISOLATION=]"
    --  --no-build-isolation-package NO_BUILD_ISOLATION_PACKAGE flag=1 help="Disable isolation when building source distributions for a specific package"
    --  --no-build help="Don't build source distributions [env: UV_NO_BUILD=]"
    --  --no-build-package NO_BUILD_PACKAGE flag=1 help="Don't build source distributions for a specific package [env: UV_NO_BUILD_PACKAGE=]"
    --  --no-binary help="Don't install pre-built wheels [env: UV_NO_BINARY=]"
    --  --no-binary-package NO_BINARY_PACKAGE flag=1 help="Don't install pre-built wheels for a specific package [env: UV_NO_BINARY_PACKAGE=]"
    --  --link-mode LINK_MODE flag=1 help="The method to use when installing packages from the global cache [env: UV_LINK_MODE=] [possible values: clone, copy, hardlink, symlink]"
    -- -n --no-cache help="Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation [env: UV_NO_CACHE=]"
    --  --cache-dir CACHE_DIR flag=1 help="Path to the cache directory [env: UV_CACHE_DIR=]"
    --  --refresh help="Refresh all cached data"
    --  --refresh-package REFRESH_PACKAGE flag=1 help="Refresh cached data for a specific package"
    -- -p --python PYTHON flag=1 help="The Python interpreter to use during resolution. [env: UV_PYTHON=]"
    --  --managed-python help="Require use of uv-managed Python versions [env: UV_MANAGED_PYTHON=]"
    --  --no-managed-python help="Disable use of uv-managed Python versions [env: UV_NO_MANAGED_PYTHON=]"
    --  --no-python-downloads help="Disable automatic downloads of Python. [env: "UV_PYTHON_DOWNLOADS=never"]"
    -- -q --quiet... help="Use quiet output"
    -- -v --verbose... help="Use verbose output"
    --  --color COLOR_CHOICE flag=1 help="Control the use of color in output [possible values: auto, always, never]"
    --  --native-tls help="Whether to load TLS certificates from the platform's native certificate store [env: UV_NATIVE_TLS=]"
    --  --offline help="Disable network access [env: UV_OFFLINE=]"
    --  --allow-insecure-host ALLOW_INSECURE_HOST flag=1 help="Allow insecure connections to a host [env: UV_INSECURE_HOST=]"
    --  --no-progress help="Hide all progress outputs [env: UV_NO_PROGRESS=]"
    --  --directory DIRECTORY flag=1 help="Change to the given directory prior to running the command"
    --  --project PROJECT flag=1 help="Run the command within the given project directory [env: UV_PROJECT=]"
    --  --config-file CONFIG_FILE flag=1 help="The path to a \`uv.toml\` file to use for configuration [env: UV_CONFIG_FILE=]"
    --  --no-config help="Avoid discovering configuration files (\`pyproject.toml\`, \`uv.toml\`) [env: UV_NO_CONFIG=]"
    -- -h --help help="Display the concise help for this command"
  }

  {
    name=tree help="Display the project's dependency tree"
    --  --universal help="Show a platform-independent dependency tree"
    -- -d --depth DEPTH flag=1 help="Maximum display depth of the dependency tree [default: 255]"
    --  --prune PRUNE flag=1 help="Prune the given package from the display of the dependency tree"
    --  --package PACKAGE flag=1 help="Display only the specified packages"
    --  --no-dedupe help="Do not de-duplicate repeated dependencies. Usually, when a package has already displayed its dependencies, further occurrences will not re-display its dependencies, and will include a (*) to indicate it has already been shown. This flag"
    --  --invert help="Show the reverse dependencies for the given package. This flag will invert the tree and display the packages that depend on the given package"
    --  --outdated help="Show the latest available version of each package in the tree"
    --  --only-dev help="Only include the development dependency group"
    --  --no-dev help="Disable the development dependency group"
    --  --group GROUP flag=1 help="Include dependencies from the specified dependency group"
    --  --no-group NO_GROUP flag=1 help="Disable the specified dependency group"
    --  --no-default-groups help="Ignore the default dependency groups"
    --  --only-group ONLY_GROUP flag=1 help="Only include dependencies from the specified dependency group"
    --  --all-groups help="Include dependencies from all dependency groups"
    --  --locked help="Assert that the \`uv.lock\` will remain unchanged [env: UV_LOCKED=]"
    --  --frozen help="Display the requirements without locking the project [env: UV_FROZEN=]"
    --  --script SCRIPT flag=1 help="Show the dependency tree the specified PEP 723 Python script, rather than the current project"
    --  --python-version PYTHON_VERSION flag=1 help="The Python version to use when filtering the tree"
    --  --python-platform PYTHON_PLATFORM flag=1 help="The platform to use when filtering the tree [possible values: windows, linux, macos, x86_64-pc-windows-msvc, i686-pc-windows-msvc, x86_64-unknown-linux-gnu, aarch64-apple-darwin, x86_64-apple-darwin, aarch64-unknown-linux-gnu,"
    --  --no-build help="Don't build source distributions [env: UV_NO_BUILD=]"
    --  --no-build-package NO_BUILD_PACKAGE flag=1 help="Don't build source distributions for a specific package [env: UV_NO_BUILD_PACKAGE=]"
    --  --no-binary help="Don't install pre-built wheels [env: UV_NO_BINARY=]"
    --  --no-binary-package NO_BINARY_PACKAGE flag=1 help="Don't install pre-built wheels for a specific package [env: UV_NO_BINARY_PACKAGE=]"
    -- -C --config-setting CONFIG_SETTING flag=1 help="Settings to pass to the PEP 517 build backend, specified as \`KEY=VALUE\` pairs"
    --  --no-build-isolation help="Disable isolation when building source distributions [env: UV_NO_BUILD_ISOLATION=]"
    --  --no-build-isolation-package NO_BUILD_ISOLATION_PACKAGE flag=1 help="Disable isolation when building source distributions for a specific package"
    --  --index INDEX flag=1 help="The URLs to use when resolving dependencies, in addition to the default index [env: UV_INDEX=]"
    --  --default-index DEFAULT_INDEX flag=1 help="The URL of the default package index (by default: <https://pypi.org/simple>) [env: UV_DEFAULT_INDEX=]"
    -- -i --index-url INDEX_URL flag=1 help="(Deprecated: use \`--default-index\` instead) The URL of the Python package index (by default: <https://pypi.org/simple>) [env: UV_INDEX_URL=]"
    --  --extra-index-url EXTRA_INDEX_URL flag=1 help="(Deprecated: use \`--index\` instead) Extra URLs of package indexes to use, in addition to \`--index-url\` [env: UV_EXTRA_INDEX_URL=]"
    -- -f --find-links FIND_LINKS flag=1 help="Locations to search for candidate distributions, in addition to those found in the registry indexes [env: UV_FIND_LINKS=]"
    --  --no-index help="Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via \`--find-links\`"
    --  --index-strategy INDEX_STRATEGY flag=1 help="The strategy to use when resolving against multiple index URLs [env: UV_INDEX_STRATEGY=] [possible values: first-index, unsafe-first-match, unsafe-best-match]"
    --  --keyring-provider KEYRING_PROVIDER flag=1 help="Attempt to use \`keyring\` for authentication for index URLs [env: UV_KEYRING_PROVIDER=] [possible values: disabled, subprocess]"
    -- -U --upgrade help="Allow package upgrades, ignoring pinned versions in any existing output file. Implies \`--refresh\`"
    -- -P --upgrade-package UPGRADE_PACKAGE flag=1 help="Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies \`--refresh-package\`"
    --  --resolution RESOLUTION flag=1 help="The strategy to use when selecting between the different compatible versions for a given package requirement [env: UV_RESOLUTION=] [possible values: highest, lowest, lowest-direct]"
    --  --prerelease PRERELEASE flag=1 help="The strategy to use when considering pre-release versions [env: UV_PRERELEASE=] [possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit]"
    --  --fork-strategy FORK_STRATEGY flag=1 help="The strategy to use when selecting multiple versions of a given package across Python versions and platforms [env: UV_FORK_STRATEGY=] [possible values: fewest, requires-python]"
    --  --exclude-newer EXCLUDE_NEWER flag=1 help="Limit candidate packages to those that were uploaded prior to the given date [env: UV_EXCLUDE_NEWER=]"
    --  --no-sources help="Ignore the \`tool.uv.sources\` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources"
    --  --link-mode LINK_MODE flag=1 help="The method to use when installing packages from the global cache [env: UV_LINK_MODE=] [possible values: clone, copy, hardlink, symlink]"
    -- -p --python PYTHON flag=1 help="The Python interpreter to use for locking and filtering. [env: UV_PYTHON=]"
    --  --managed-python help="Require use of uv-managed Python versions [env: UV_MANAGED_PYTHON=]"
    --  --no-managed-python help="Disable use of uv-managed Python versions [env: UV_NO_MANAGED_PYTHON=]"
    --  --no-python-downloads help="Disable automatic downloads of Python. [env: "UV_PYTHON_DOWNLOADS=never"]"
    -- -n --no-cache help="Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation [env: UV_NO_CACHE=]"
    --  --cache-dir CACHE_DIR flag=1 help="Path to the cache directory [env: UV_CACHE_DIR=]"
    -- -q --quiet... help="Use quiet output"
    -- -v --verbose... help="Use verbose output"
    --  --color COLOR_CHOICE flag=1 help="Control the use of color in output [possible values: auto, always, never]"
    --  --native-tls help="Whether to load TLS certificates from the platform's native certificate store [env: UV_NATIVE_TLS=]"
    --  --offline help="Disable network access [env: UV_OFFLINE=]"
    --  --allow-insecure-host ALLOW_INSECURE_HOST flag=1 help="Allow insecure connections to a host [env: UV_INSECURE_HOST=]"
    --  --no-progress help="Hide all progress outputs [env: UV_NO_PROGRESS=]"
    --  --directory DIRECTORY flag=1 help="Change to the given directory prior to running the command"
    --  --project PROJECT flag=1 help="Run the command within the given project directory [env: UV_PROJECT=]"
    --  --config-file CONFIG_FILE flag=1 help="The path to a \`uv.toml\` file to use for configuration [env: UV_CONFIG_FILE=]"
    --  --no-config help="Avoid discovering configuration files (\`pyproject.toml\`, \`uv.toml\`) [env: UV_NO_CONFIG=]"
    -- -h --help help="Display the concise help for this command"
  }

  {
    name=tool help="Run and install commands provided by Python packages"
    -- -n --no-cache help="Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation [env: UV_NO_CACHE=]"
    --  --cache-dir CACHE_DIR flag=1 help="Path to the cache directory [env: UV_CACHE_DIR=]"
    --  --managed-python help="Require use of uv-managed Python versions [env: UV_MANAGED_PYTHON=]"
    --  --no-managed-python help="Disable use of uv-managed Python versions [env: UV_NO_MANAGED_PYTHON=]"
    --  --no-python-downloads help="Disable automatic downloads of Python. [env: "UV_PYTHON_DOWNLOADS=never"]"
    -- -q --quiet... help="Use quiet output"
    -- -v --verbose... help="Use verbose output"
    --  --color COLOR_CHOICE flag=1 help="Control the use of color in output [possible values: auto, always, never]"
    --  --native-tls help="Whether to load TLS certificates from the platform's native certificate store [env: UV_NATIVE_TLS=]"
    --  --offline help="Disable network access [env: UV_OFFLINE=]"
    --  --allow-insecure-host ALLOW_INSECURE_HOST flag=1 help="Allow insecure connections to a host [env: UV_INSECURE_HOST=]"
    --  --no-progress help="Hide all progress outputs [env: UV_NO_PROGRESS=]"
    --  --directory DIRECTORY flag=1 help="Change to the given directory prior to running the command"
    --  --project PROJECT flag=1 help="Run the command within the given project directory [env: UV_PROJECT=]"
    --  --config-file CONFIG_FILE flag=1 help="The path to a \`uv.toml\` file to use for configuration [env: UV_CONFIG_FILE=]"
    --  --no-config help="Avoid discovering configuration files (\`pyproject.toml\`, \`uv.toml\`) [env: UV_NO_CONFIG=]"
    -- -h --help help="Display the concise help for this command"
    -- COMMAND
  }

  {
    name=python help="Manage Python versions and installations"
    -- -n --no-cache help="Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation [env: UV_NO_CACHE=]"
    --  --cache-dir CACHE_DIR flag=1 help="Path to the cache directory [env: UV_CACHE_DIR=]"
    --  --managed-python help="Require use of uv-managed Python versions [env: UV_MANAGED_PYTHON=]"
    --  --no-managed-python help="Disable use of uv-managed Python versions [env: UV_NO_MANAGED_PYTHON=]"
    --  --no-python-downloads help="Disable automatic downloads of Python. [env: "UV_PYTHON_DOWNLOADS=never"]"
    -- -q --quiet... help="Use quiet output"
    -- -v --verbose... help="Use verbose output"
    --  --color COLOR_CHOICE flag=1 help="Control the use of color in output [possible values: auto, always, never]"
    --  --native-tls help="Whether to load TLS certificates from the platform's native certificate store [env: UV_NATIVE_TLS=]"
    --  --offline help="Disable network access [env: UV_OFFLINE=]"
    --  --allow-insecure-host ALLOW_INSECURE_HOST flag=1 help="Allow insecure connections to a host [env: UV_INSECURE_HOST=]"
    --  --no-progress help="Hide all progress outputs [env: UV_NO_PROGRESS=]"
    --  --directory DIRECTORY flag=1 help="Change to the given directory prior to running the command"
    --  --project PROJECT flag=1 help="Run the command within the given project directory [env: UV_PROJECT=]"
    --  --config-file CONFIG_FILE flag=1 help="The path to a \`uv.toml\` file to use for configuration [env: UV_CONFIG_FILE=]"
    --  --no-config help="Avoid discovering configuration files (\`pyproject.toml\`, \`uv.toml\`) [env: UV_NO_CONFIG=]"
    -- -h --help help="Display the concise help for this command"
    -- COMMAND
  }

  {
    name=pip help="Manage Python packages with a pip-compatible interface"
    -- -n --no-cache help="Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation [env: UV_NO_CACHE=]"
    --  --cache-dir CACHE_DIR flag=1 help="Path to the cache directory [env: UV_CACHE_DIR=]"
    --  --managed-python help="Require use of uv-managed Python versions [env: UV_MANAGED_PYTHON=]"
    --  --no-managed-python help="Disable use of uv-managed Python versions [env: UV_NO_MANAGED_PYTHON=]"
    --  --no-python-downloads help="Disable automatic downloads of Python. [env: "UV_PYTHON_DOWNLOADS=never"]"
    -- -q --quiet... help="Use quiet output"
    -- -v --verbose... help="Use verbose output"
    --  --color COLOR_CHOICE flag=1 help="Control the use of color in output [possible values: auto, always, never]"
    --  --native-tls help="Whether to load TLS certificates from the platform's native certificate store [env: UV_NATIVE_TLS=]"
    --  --offline help="Disable network access [env: UV_OFFLINE=]"
    --  --allow-insecure-host ALLOW_INSECURE_HOST flag=1 help="Allow insecure connections to a host [env: UV_INSECURE_HOST=]"
    --  --no-progress help="Hide all progress outputs [env: UV_NO_PROGRESS=]"
    --  --directory DIRECTORY flag=1 help="Change to the given directory prior to running the command"
    --  --project PROJECT flag=1 help="Run the command within the given project directory [env: UV_PROJECT=]"
    --  --config-file CONFIG_FILE flag=1 help="The path to a \`uv.toml\` file to use for configuration [env: UV_CONFIG_FILE=]"
    --  --no-config help="Avoid discovering configuration files (\`pyproject.toml\`, \`uv.toml\`) [env: UV_NO_CONFIG=]"
    -- -h --help help="Display the concise help for this command"
    -- COMMAND
  }

  {
    name=venv help="Create a virtual environment"
    --  --no-project help="Avoid discovering a project or workspace"
    --  --seed help="Install seed packages (one or more of: \`pip\`, \`setuptools\`, and \`wheel\`) into the virtual environment [env: UV_VENV_SEED=]"
    --  --allow-existing help="Preserve any existing files or directories at the target path"
    --  --prompt PROMPT flag=1 help="Provide an alternative prompt prefix for the virtual environment."
    --  --system-site-packages help="Give the virtual environment access to the system site packages directory"
    --  --relocatable help="Make the virtual environment relocatable"
    --  --index-strategy INDEX_STRATEGY flag=1 help="The strategy to use when resolving against multiple index URLs [env: UV_INDEX_STRATEGY=] [possible values: first-index, unsafe-first-match, unsafe-best-match]"
    --  --keyring-provider KEYRING_PROVIDER flag=1 help="Attempt to use \`keyring\` for authentication for index URLs [env: UV_KEYRING_PROVIDER=] [possible values: disabled, subprocess]"
    --  --exclude-newer EXCLUDE_NEWER flag=1 help="Limit candidate packages to those that were uploaded prior to the given date [env: UV_EXCLUDE_NEWER=]"
    --  --link-mode LINK_MODE flag=1 help="The method to use when installing packages from the global cache [env: UV_LINK_MODE=] [possible values: clone, copy, hardlink, symlink]"
    -- -p --python PYTHON flag=1 help="The Python interpreter to use for the virtual environment. [env: UV_PYTHON=]"
    --  --managed-python help="Require use of uv-managed Python versions [env: UV_MANAGED_PYTHON=]"
    --  --no-managed-python help="Disable use of uv-managed Python versions [env: UV_NO_MANAGED_PYTHON=]"
    --  --no-python-downloads help="Disable automatic downloads of Python. [env: "UV_PYTHON_DOWNLOADS=never"]"
    --  --index INDEX flag=1 help="The URLs to use when resolving dependencies, in addition to the default index [env: UV_INDEX=]"
    --  --default-index DEFAULT_INDEX flag=1 help="The URL of the default package index (by default: <https://pypi.org/simple>) [env: UV_DEFAULT_INDEX=]"
    -- -i --index-url INDEX_URL flag=1 help="(Deprecated: use \`--default-index\` instead) The URL of the Python package index (by default: <https://pypi.org/simple>) [env: UV_INDEX_URL=]"
    --  --extra-index-url EXTRA_INDEX_URL flag=1 help="(Deprecated: use \`--index\` instead) Extra URLs of package indexes to use, in addition to \`--index-url\` [env: UV_EXTRA_INDEX_URL=]"
    -- -f --find-links FIND_LINKS flag=1 help="Locations to search for candidate distributions, in addition to those found in the registry indexes [env: UV_FIND_LINKS=]"
    --  --no-index help="Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via \`--find-links\`"
    --  --refresh help="Refresh all cached data"
    -- -n --no-cache help="Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation [env: UV_NO_CACHE=]"
    --  --refresh-package REFRESH_PACKAGE flag=1 help="Refresh cached data for a specific package"
    --  --cache-dir CACHE_DIR flag=1 help="Path to the cache directory [env: UV_CACHE_DIR=]"
    -- -q --quiet... help="Use quiet output"
    -- -v --verbose... help="Use verbose output"
    --  --color COLOR_CHOICE flag=1 help="Control the use of color in output [possible values: auto, always, never]"
    --  --native-tls help="Whether to load TLS certificates from the platform's native certificate store [env: UV_NATIVE_TLS=]"
    --  --offline help="Disable network access [env: UV_OFFLINE=]"
    --  --allow-insecure-host ALLOW_INSECURE_HOST flag=1 help="Allow insecure connections to a host [env: UV_INSECURE_HOST=]"
    --  --no-progress help="Hide all progress outputs [env: UV_NO_PROGRESS=]"
    --  --directory DIRECTORY flag=1 help="Change to the given directory prior to running the command"
    --  --project PROJECT flag=1 help="Run the command within the given project directory [env: UV_PROJECT=]"
    --  --config-file CONFIG_FILE flag=1 help="The path to a \`uv.toml\` file to use for configuration [env: UV_CONFIG_FILE=]"
    --  --no-config help="Avoid discovering configuration files (\`pyproject.toml\`, \`uv.toml\`) [env: UV_NO_CONFIG=]"
    -- -h --help help="Display the concise help for this command"
  }

  {
    name=build help="Build Python packages into source distributions and wheels"
    --  --package PACKAGE flag=1 help="Build a specific package in the workspace"
    --  --all-packages help="Builds all packages in the workspace"
    -- -o --out-dir OUT_DIR flag=1 help="The output directory to which distributions should be written"
    --  --sdist help="Build a source distribution ("sdist") from the given directory"
    --  --wheel help="Build a binary distribution ("wheel") from the given directory"
    --  --no-build-logs help="Hide logs from the build backend"
    --  --force-pep517 help="Always build through PEP 517, don't use the fast path for the uv build backend"
    -- -b --build-constraints BUILD_CONSTRAINTS flag=1 help="Constrain build dependencies using the given requirements files when building distributions [env: UV_BUILD_CONSTRAINT=]"
    --  --require-hashes help="Require a matching hash for each requirement [env: UV_REQUIRE_HASHES=]"
    --  --no-verify-hashes help="Disable validation of hashes in the requirements file [env: UV_NO_VERIFY_HASHES=]"
    -- -p --python PYTHON flag=1 help="The Python interpreter to use for the build environment. [env: UV_PYTHON=]"
    --  --managed-python help="Require use of uv-managed Python versions [env: UV_MANAGED_PYTHON=]"
    --  --no-managed-python help="Disable use of uv-managed Python versions [env: UV_NO_MANAGED_PYTHON=]"
    --  --no-python-downloads help="Disable automatic downloads of Python. [env: "UV_PYTHON_DOWNLOADS=never"]"
    --  --index INDEX flag=1 help="The URLs to use when resolving dependencies, in addition to the default index [env: UV_INDEX=]"
    --  --default-index DEFAULT_INDEX flag=1 help="The URL of the default package index (by default: <https://pypi.org/simple>) [env: UV_DEFAULT_INDEX=]"
    -- -i --index-url INDEX_URL flag=1 help="(Deprecated: use \`--default-index\` instead) The URL of the Python package index (by default: <https://pypi.org/simple>) [env: UV_INDEX_URL=]"
    --  --extra-index-url EXTRA_INDEX_URL flag=1 help="(Deprecated: use \`--index\` instead) Extra URLs of package indexes to use, in addition to \`--index-url\` [env: UV_EXTRA_INDEX_URL=]"
    -- -f --find-links FIND_LINKS flag=1 help="Locations to search for candidate distributions, in addition to those found in the registry indexes [env: UV_FIND_LINKS=]"
    --  --no-index help="Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via \`--find-links\`"
    --  --index-strategy INDEX_STRATEGY flag=1 help="The strategy to use when resolving against multiple index URLs [env: UV_INDEX_STRATEGY=] [possible values: first-index, unsafe-first-match, unsafe-best-match]"
    --  --keyring-provider KEYRING_PROVIDER flag=1 help="Attempt to use \`keyring\` for authentication for index URLs [env: UV_KEYRING_PROVIDER=] [possible values: disabled, subprocess]"
    -- -U --upgrade help="Allow package upgrades, ignoring pinned versions in any existing output file. Implies \`--refresh\`"
    -- -P --upgrade-package UPGRADE_PACKAGE flag=1 help="Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies \`--refresh-package\`"
    --  --resolution RESOLUTION flag=1 help="The strategy to use when selecting between the different compatible versions for a given package requirement [env: UV_RESOLUTION=] [possible values: highest, lowest, lowest-direct]"
    --  --prerelease PRERELEASE flag=1 help="The strategy to use when considering pre-release versions [env: UV_PRERELEASE=] [possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit]"
    --  --fork-strategy FORK_STRATEGY flag=1 help="The strategy to use when selecting multiple versions of a given package across Python versions and platforms [env: UV_FORK_STRATEGY=] [possible values: fewest, requires-python]"
    --  --exclude-newer EXCLUDE_NEWER flag=1 help="Limit candidate packages to those that were uploaded prior to the given date [env: UV_EXCLUDE_NEWER=]"
    --  --no-sources help="Ignore the \`tool.uv.sources\` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any workspace, Git, URL, or local path sources"
    -- -C --config-setting CONFIG_SETTING flag=1 help="Settings to pass to the PEP 517 build backend, specified as \`KEY=VALUE\` pairs"
    --  --no-build-isolation help="Disable isolation when building source distributions [env: UV_NO_BUILD_ISOLATION=]"
    --  --no-build-isolation-package NO_BUILD_ISOLATION_PACKAGE flag=1 help="Disable isolation when building source distributions for a specific package"
    --  --no-build help="Don't build source distributions [env: UV_NO_BUILD=]"
    --  --no-build-package NO_BUILD_PACKAGE flag=1 help="Don't build source distributions for a specific package [env: UV_NO_BUILD_PACKAGE=]"
    --  --no-binary help="Don't install pre-built wheels [env: UV_NO_BINARY=]"
    --  --no-binary-package NO_BINARY_PACKAGE flag=1 help="Don't install pre-built wheels for a specific package [env: UV_NO_BINARY_PACKAGE=]"
    --  --link-mode LINK_MODE flag=1 help="The method to use when installing packages from the global cache [env: UV_LINK_MODE=] [possible values: clone, copy, hardlink, symlink]"
    -- -n --no-cache help="Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation [env: UV_NO_CACHE=]"
    --  --cache-dir CACHE_DIR flag=1 help="Path to the cache directory [env: UV_CACHE_DIR=]"
    --  --refresh help="Refresh all cached data"
    --  --refresh-package REFRESH_PACKAGE flag=1 help="Refresh cached data for a specific package"
    -- -q --quiet... help="Use quiet output"
    -- -v --verbose... help="Use verbose output"
    --  --color COLOR_CHOICE flag=1 help="Control the use of color in output [possible values: auto, always, never]"
    --  --native-tls help="Whether to load TLS certificates from the platform's native certificate store [env: UV_NATIVE_TLS=]"
    --  --offline help="Disable network access [env: UV_OFFLINE=]"
    --  --allow-insecure-host ALLOW_INSECURE_HOST flag=1 help="Allow insecure connections to a host [env: UV_INSECURE_HOST=]"
    --  --no-progress help="Hide all progress outputs [env: UV_NO_PROGRESS=]"
    --  --directory DIRECTORY flag=1 help="Change to the given directory prior to running the command"
    --  --project PROJECT flag=1 help="Run the command within the given project directory [env: UV_PROJECT=]"
    --  --config-file CONFIG_FILE flag=1 help="The path to a \`uv.toml\` file to use for configuration [env: UV_CONFIG_FILE=]"
    --  --no-config help="Avoid discovering configuration files (\`pyproject.toml\`, \`uv.toml\`) [env: UV_NO_CONFIG=]"
    -- -h --help help="Display the concise help for this command"
  }

  {
    name=publish help="Upload distributions to an index"
    --  --index INDEX flag=1 help="The name of an index in the configuration to use for publishing. [env: UV_PUBLISH_INDEX=]"
    -- -u --username USERNAME flag=1 help="The username for the upload [env: UV_PUBLISH_USERNAME=]"
    -- -p --password PASSWORD flag=1 help="The password for the upload [env: UV_PUBLISH_PASSWORD=]"
    -- -t --token TOKEN flag=1 help="The token for the upload [env: UV_PUBLISH_TOKEN=]"
    --  --trusted-publishing TRUSTED_PUBLISHING flag=1 help="Configure using trusted publishing through GitHub Actions [possible values: automatic, always, never]"
    --  --keyring-provider KEYRING_PROVIDER flag=1 help="Attempt to use \`keyring\` for authentication for remote requirements files [env: UV_KEYRING_PROVIDER=] [possible values: disabled, subprocess]"
    --  --publish-url PUBLISH_URL flag=1 help="The URL of the upload endpoint (not the index URL) [env: UV_PUBLISH_URL=]"
    --  --check-url CHECK_URL flag=1 help="Check an index URL for existing files to skip duplicate uploads [env: UV_PUBLISH_CHECK_URL=]"
    -- -n --no-cache help="Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation [env: UV_NO_CACHE=]"
    --  --cache-dir CACHE_DIR flag=1 help="Path to the cache directory [env: UV_CACHE_DIR=]"
    --  --managed-python help="Require use of uv-managed Python versions [env: UV_MANAGED_PYTHON=]"
    --  --no-managed-python help="Disable use of uv-managed Python versions [env: UV_NO_MANAGED_PYTHON=]"
    --  --no-python-downloads help="Disable automatic downloads of Python. [env: "UV_PYTHON_DOWNLOADS=never"]"
    -- -q --quiet... help="Use quiet output"
    -- -v --verbose... help="Use verbose output"
    --  --color COLOR_CHOICE flag=1 help="Control the use of color in output [possible values: auto, always, never]"
    --  --native-tls help="Whether to load TLS certificates from the platform's native certificate store [env: UV_NATIVE_TLS=]"
    --  --offline help="Disable network access [env: UV_OFFLINE=]"
    --  --allow-insecure-host ALLOW_INSECURE_HOST flag=1 help="Allow insecure connections to a host [env: UV_INSECURE_HOST=]"
    --  --no-progress help="Hide all progress outputs [env: UV_NO_PROGRESS=]"
    --  --directory DIRECTORY flag=1 help="Change to the given directory prior to running the command"
    --  --project PROJECT flag=1 help="Run the command within the given project directory [env: UV_PROJECT=]"
    --  --config-file CONFIG_FILE flag=1 help="The path to a \`uv.toml\` file to use for configuration [env: UV_CONFIG_FILE=]"
    --  --no-config help="Avoid discovering configuration files (\`pyproject.toml\`, \`uv.toml\`) [env: UV_NO_CONFIG=]"
    -- -h --help help="Display the concise help for this command"
  }

  {
    name=cache help="Manage uv's cache"
    -- -n --no-cache help="Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation [env: UV_NO_CACHE=]"
    --  --cache-dir CACHE_DIR flag=1 help="Path to the cache directory [env: UV_CACHE_DIR=]"
    --  --managed-python help="Require use of uv-managed Python versions [env: UV_MANAGED_PYTHON=]"
    --  --no-managed-python help="Disable use of uv-managed Python versions [env: UV_NO_MANAGED_PYTHON=]"
    --  --no-python-downloads help="Disable automatic downloads of Python. [env: "UV_PYTHON_DOWNLOADS=never"]"
    -- -q --quiet... help="Use quiet output"
    -- -v --verbose... help="Use verbose output"
    --  --color COLOR_CHOICE flag=1 help="Control the use of color in output [possible values: auto, always, never]"
    --  --native-tls help="Whether to load TLS certificates from the platform's native certificate store [env: UV_NATIVE_TLS=]"
    --  --offline help="Disable network access [env: UV_OFFLINE=]"
    --  --allow-insecure-host ALLOW_INSECURE_HOST flag=1 help="Allow insecure connections to a host [env: UV_INSECURE_HOST=]"
    --  --no-progress help="Hide all progress outputs [env: UV_NO_PROGRESS=]"
    --  --directory DIRECTORY flag=1 help="Change to the given directory prior to running the command"
    --  --project PROJECT flag=1 help="Run the command within the given project directory [env: UV_PROJECT=]"
    --  --config-file CONFIG_FILE flag=1 help="The path to a \`uv.toml\` file to use for configuration [env: UV_CONFIG_FILE=]"
    --  --no-config help="Avoid discovering configuration files (\`pyproject.toml\`, \`uv.toml\`) [env: UV_NO_CONFIG=]"
    -- -h --help help="Display the concise help for this command"
    -- COMMAND
  }

  {
    name=self help="Manage the uv executable"
    -- -n --no-cache help="Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation [env: UV_NO_CACHE=]"
    --  --cache-dir CACHE_DIR flag=1 help="Path to the cache directory [env: UV_CACHE_DIR=]"
    --  --managed-python help="Require use of uv-managed Python versions [env: UV_MANAGED_PYTHON=]"
    --  --no-managed-python help="Disable use of uv-managed Python versions [env: UV_NO_MANAGED_PYTHON=]"
    --  --no-python-downloads help="Disable automatic downloads of Python. [env: "UV_PYTHON_DOWNLOADS=never"]"
    -- -q --quiet... help="Use quiet output"
    -- -v --verbose... help="Use verbose output"
    --  --color COLOR_CHOICE flag=1 help="Control the use of color in output [possible values: auto, always, never]"
    --  --native-tls help="Whether to load TLS certificates from the platform's native certificate store [env: UV_NATIVE_TLS=]"
    --  --offline help="Disable network access [env: UV_OFFLINE=]"
    --  --allow-insecure-host ALLOW_INSECURE_HOST flag=1 help="Allow insecure connections to a host [env: UV_INSECURE_HOST=]"
    --  --no-progress help="Hide all progress outputs [env: UV_NO_PROGRESS=]"
    --  --directory DIRECTORY flag=1 help="Change to the given directory prior to running the command"
    --  --project PROJECT flag=1 help="Run the command within the given project directory [env: UV_PROJECT=]"
    --  --config-file CONFIG_FILE flag=1 help="The path to a \`uv.toml\` file to use for configuration [env: UV_CONFIG_FILE=]"
    --  --no-config help="Avoid discovering configuration files (\`pyproject.toml\`, \`uv.toml\`) [env: UV_NO_CONFIG=]"
    -- -h --help help="Display the concise help for this command"
    -- COMMAND
  }

  {
    name=help help="Display documentation for a command"
    --  --no-pager help="Disable pager when printing help"
    -- COMMAND nargs="*"
  }

)

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
. "$DIR"/../bin/L_lib.sh
time L_argparse "${args[@]}" ---- "$@"
