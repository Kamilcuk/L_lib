#!/usr/bin/env python3

import tempfile
import argparse
import os
import sys
import click
from typing import Optional, Tuple
import subprocess
import re
from dataclasses import dataclass, field


@click.group()
def cli():
    pass


@cli.command()
@click.argument("file")
@click.argument("script")
def profile(file: str, script: str):
    cmd = """
LC_ALL=C
exec {FD}>"$1"
_trap_DEBUG() {
    local i txt=""
	for ((i = 1; i != ${#BASH_SOURCE[@]}; ++i)); do
		txt+=" $i ${BASH_SOURCE[i]@Q} ${BASH_LINENO[i-1]} ${FUNCNAME[i]@Q}"
    done
    echo "${EPOCHREALTIME//./} ${BASH_COMMAND@Q} $txt"
    L_print_traceback
} >&$FD
# exec {BASH_XTRACEFD}> >(,ts --nano >&$FD)
trap '_trap_DEBUG' DEBUG
set -T
: START
eval "$2"
: END
"""
    cmd = ["bash", "-c", cmd, "bash", file, script]
    print(f"+ {cmd}")
    subprocess.run(cmd)
    subprocess.run(["tail", "-n20", file])


@cli.command()
@click.argument("file")
def analyze(file: str):
    @dataclass
    class Line:
        stamp: int
        trace: list[str]

    with open(file, "rb") as f:
        for line in f:
            line = line.decode(errors="replace")
            if re.match(r"^[0-9]+ \++ .+$", line):
                pass
            if re.match("^# [0-9]+ .+$", line):
                pass


@cli.command()
@click.option("-f", "--file")
@click.argument("script", default=". bin/L_lib.sh test -r argparse")
def profileandanalyze(file: Optional[str], script: str):
    with tempfile.NamedTemporaryFile() as f:
        file = file or f.name
        profile.main([file, script], standalone_mode=False)
        analyze.main([file])

if __name__ == "__main__":
    cli.main()
